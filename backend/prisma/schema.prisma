generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String?
  name           String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  // Relations to conversations (as user A or user B)
  conversationsA Conversation[] @relation("UserAConversations")
  conversationsB Conversation[] @relation("UserBConversations")
  messages       Message[]
}

model Conversation {
  id        Int       @id @default(autoincrement())
  userAId   Int
  userBId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  // Set up relations to both users
  userA User @relation("UserAConversations", fields: [userAId], references: [id])
  userB User @relation("UserBConversations", fields: [userBId], references: [id])

  @@unique([userAId, userBId]) // Ensure a conversation between two users is unique
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  userId         Int
  conversationId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
